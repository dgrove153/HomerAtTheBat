extends layout

block inlineScripts
	script.
		var validateForm = function(form) {
			var checkbox = $(form).parent().find('input:checked');
			if(checkbox.length == 1) {
				return true;
			} else {
				alert("You must select the player as a keeper before locking them up");
				return false;
			}
		}
		var changeTotal = function(checkbox) {
			var change = parseInt(checkbox.value);
			if(!checkbox.checked) {
				change *= -1;
			}
			var curBudget = parseInt($('#draftBudget').text().split(":")[1]);
			curBudget += (change * -1);
			if($('.player[minor_leaguer="false"]').find('input:checked').length > 10) {
				checkbox.checked = false;
				alert("Max number of keepers is 10");
			} else if(curBudget < 0) {
				checkbox.checked = false;
				alert("You may not exceed your own budget");
			} else {
				$('#draftBudget').text("2014 Draft Budget: " + curBudget);
			}
		};
		var saveChanges = function(name) {
			if($('.player[minor_leaguer="true"]').find('input:checked').length > 10) {
				alert("You cannot keep more than 10 minor leaguers. " + 
					"Deselect one or click 'Keep as major leaguer' to keep the player for a starting salary of 3 units");
				return;
			}
			var payload = { team: name, total : 0, keepers: [], nonkeepers: [] };
			payload.total = parseInt($('#draftBudget').text().split(":")[1]);
			var players = $('.player');
			for(var i = 0; i < players.length; i++) {
				var pid = players.eq(i).attr('player_id');
				if(players.eq(i).find("input[type=checkbox]:checked").length != 0) {
					payload.keepers.push(pid);
				} else {
					payload.nonkeepers.push(pid);
				}
			}
			console.log(payload);
			$.post("/gm/keeper", payload, function(result) {
				if(result == "worked") {
					alert('Your preferences have been saved');
				}
			});
		};




block content
	section(id="top")
		p= message

		h1= team.fullName

		h3#draftBudget
			='2014 Draft Budget: ' + cash.value
			
		h3#saveButton
			-if(isTeamOwner)
				input.saveChanges(type="button" value="Save Selections" onclick="saveChanges('" + team.team + "')")

	mixin player(player, position, properties)
		-if(player != undefined)
			tr(class="player" player_id=player._id minor_leaguer="" + player.history[player.history_index].minor_leaguer)
				td
					-if(player.history[player.history_index].minor_leaguer)
						| Minor Leaguer 
					-else
						= player.history[player.history_index].fantasy_position
				td
					= player.name_display_first_last
				td.number
					= player.history[player.history_index].salary
				td.number
					= player.nextYearSalary	
				td.number
					= player.history[player.history_index].contract_year
				td
					input(
						type="checkbox"
						checked=player.checked
						disabled=player.history[player.history_index].locked_up || player.history[player.history_index-1].locked_up
						onclick="changeTotal(this)"
						value=player.nextYearSalary
						)
				-if(player.nextYearSalary >= 30 && !player.history[player.history_index-1].locked_up)
					form(method="POST" action="/gm/lockup" onsubmit="return validateForm(this)")
						td
							input(type="hidden" name="_id" value=player._id)
							input(type="hidden" name="salary" value=player.nextYearSalary)
							input(type="submit" value="Lock Up")
				-else if(player.nextYearSalary >= 30 && player.history[player.history_index-1].locked_up && !player.history[player.history_index].locked_up)
					form(method="POST" action="/gm/lockup/remove")
						td
							input(type="hidden" name="_id" value=player._id)
							input(type="submit" value="Un-lock up")
				-else if(player.history[player.history_index].locked_up)
					td
						| Locked Up
		-else
			tr
				td= position
				td -
				td

	section(id="left", style="width:900px")
		table(id='players_' + team.team)
			thead
				th Position
				th Name
				th= "Salary " + year
				-var nextYear = parseInt(year) + 1;
				th= "Salary " + nextYear
				th= "Contract Year " + year
				th Select
			tbody
				mixin player(players.catchers[0], 'C')
				mixin player(players.catchers[1], 'C')
				mixin player(players.first_base, '1B')
				mixin player(players.second_base, '2B')
				mixin player(players.third_base, '3B')
				mixin player(players.shortstop, 'SS')
				mixin player(players.middle_infield, '2B/SS')
				mixin player(players.corner_infield, '1B/3B')
				mixin player(players.outfielders[0], 'OF')
				mixin player(players.outfielders[1], 'OF')
				mixin player(players.outfielders[2], 'OF')
				mixin player(players.outfielders[3], 'OF')
				mixin player(players.outfielders[4], 'OF')
				mixin player(players.utility, 'U')
				mixin player(players.pitchers[0], 'P')
				mixin player(players.pitchers[1], 'P')
				mixin player(players.pitchers[2], 'P')
				mixin player(players.pitchers[3], 'P')
				mixin player(players.pitchers[4], 'P')
				mixin player(players.pitchers[5], 'P')
				mixin player(players.pitchers[6], 'P')
				mixin player(players.pitchers[7], 'P')
				mixin player(players.pitchers[8], 'P')
				-if(players.dl != undefined)
					-for(var i = 0; i < players.dl.length; i++)
						mixin player(players.dl[i], 'DL')
				-if(players.minor_leaguers != undefined)
					-for(var i = 0; i < players.minor_leaguers.length; i++)
						mixin player(players.minor_leaguers[i], 'MIN')