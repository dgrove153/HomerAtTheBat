extends layout

block inlineScripts
	script.
		$(function() {
			var sortOrderMap = {};
			var count = 1;
			for(var prop in battingCategories) {
				sortOrderMap[count] = battingCategories[prop].sortOrder;
				count++;
			};
			for(var prop in pitchingCategories) {
				sortOrderMap[count] = pitchingCategories[prop].sortOrder;
				count++;
			};

			$('#stats').tablesorter({
				sortInitialOrder: 'desc',
				sortOrderMap: sortOrderMap
			});
			$('#points').tablesorter({
				sortInitialOrder: 'desc',
			});

			var group = $.cookie('group');
			group = group ? group : 'espn';
			if(group) {
				var span = $('[class="gb_' + group + '"]');
				showGroup(group, span);
			}
		});

		var submitStandings = function() {
			var form = document.createElement("form");
			form.setAttribute("method", "POST");
			form.setAttribute("action", "/standings");
			var battingCBs = $('input[batting="1"]:checked:visible');
			var pitchingCBs = $('input[batting="0"]:checked:visible');
			var battingCategories = "";
			var pitchingCategories = "";
			for(var i = 0; i < battingCBs.length; i++) {
				var category = $(battingCBs[i]).attr('category');
				battingCategories += category;
				if(i != battingCBs.length - 1) {
					battingCategories += ",";
				}
			}
			for(var i = 0; i < pitchingCBs.length; i++) {
				var category = $(pitchingCBs[i]).attr('category');
				pitchingCategories += category;
				if(i != pitchingCBs.length - 1) {
					pitchingCategories += ",";
				}	
			}
			var beginDate = $('input[type="date"][name="begin"]').val();
			var endDate = $('input[type="date"][name="end"]').val();
			if(beginDate.length > 0) {
				var hiddenField = document.createElement("input");
				hiddenField.setAttribute("type", "hidden");
				hiddenField.setAttribute("name", "beginDate");
				hiddenField.setAttribute("value", beginDate);
				form.appendChild(hiddenField);
			}
			if(endDate.length > 0) {
				var hiddenField = document.createElement("input");
				hiddenField.setAttribute("type", "hidden");
				hiddenField.setAttribute("name", "endDate");
				hiddenField.setAttribute("value", endDate);
				form.appendChild(hiddenField);
			}
			var hiddenField = document.createElement("input");
			hiddenField.setAttribute("type", "hidden");
			hiddenField.setAttribute("name", "battingCategories");
			hiddenField.setAttribute("value", battingCategories);
			form.appendChild(hiddenField);	
			hiddenField = document.createElement("input");
			hiddenField.setAttribute("type", "hidden");
			hiddenField.setAttribute("name", "pitchingCategories");
			hiddenField.setAttribute("value", pitchingCategories);
			form.appendChild(hiddenField);	
			document.body.appendChild(form);
			form.submit();
		}

		var showGroup = function(groupName, span) {
			$('.category').hide();

			$('[groups*="' + groupName + '"]').show();

			$.cookie('group', groupName, { expires: 1 });

			$('[class^="gb"]').css('color', 'white');
			$(span).css('color', 'lightblue');
		}

		function selectAll() {
			$('input:visible').prop('checked', true);
		}

block content

	include partials/teamLink
	
	span#pageTitle Standings
	span.unselectable(style="padding-left:10px")= "Last Updated: " + moment(teamsWithPoints[0].stats.lastUpdated).format('MMMM Do YYYY, h:mm:ss a')
	div.widget
		h2 Stats
		div
			div(style="display:inline-block;vertical-align:top")
				input(type="button" onclick="submitStandings()" value="Customize Standings")
				form(method="GET" action="/standings/default")
					input(type="submit" value="Return to Default")
				p= "From " + moment(dates.beginDate).format('MMMM Do') + " through " + moment().format('MMMM Do')
				p= dates.endDate
			div(style="display:inline-block;vertical-align:top")
				span.gb_espn(style="padding-left:15px;cursor:pointer" onclick="showGroup('espn', this)") ESPN Categories
				span.gb_pitching(style="padding-left:15px;cursor:pointer" onclick="showGroup('pitching', this)") Pitching Categories
				span.gb_batting(style="padding-left:15px;cursor:pointer" onclick="showGroup('batting', this)") Batting Categories
				span.gb_sabr(style="padding-left:15px;cursor:pointer" onclick="showGroup('sabr', this)") SABRmetric Categories
				span.gb_all(style="padding-left:15px;cursor:pointer" onclick="showGroup('all', this)") All Categories
				br
				span(style="padding-left:15px;cursor:pointer" onclick="selectAll()") Select All
		table.hoverable#stats(style="width:100%")
			thead
				th.sortableHeader(style="text-align:left;width:10%")
					span Team
				-each bCategory in battingCategories
					th.sortableHeader.category(style="text-align:right" groups="all " + bCategory.groups)
						input(type="checkbox" checked=includedCategories[bCategory.id] batting="1" category=bCategory.id)
						span= bCategory.display
				-each pCategory in pitchingCategories
					th.sortableHeader.category(style="text-align:right" groups="all " + pCategory.groups)
						input(type="checkbox" checked=includedCategories[pCategory.id] batting="0" category=pCategory.id)
						span= pCategory.display

			-each team in teamsWithPoints
				-if(team.teamId != 0)
					-var batting = team.stats.batting;
					-var pitching = team.stats.pitching;
					-var background = user && user.team == team.teamId ? "green" : "";
					tr(style="background:" + background)
						td
							mixin teamLink(teamHash[team.teamId], true)
						-each bCategory in battingCategories
							-var statProperty = bCategory.statProperty ? bCategory.statProperty : bCategory.id;
							-if(!isNaN(batting[statProperty] * bCategory.multiplier) && isFinite(batting[statProperty] * bCategory.multiplier))
								td.number.category(groups="all " + bCategory.groups)= numeral(batting[statProperty] * bCategory.multiplier).format(bCategory.numberFormat)
						-each pCategory in pitchingCategories
							-var statProperty = pCategory.statProperty ? pCategory.statProperty : pCategory.id;
							-if(!isNaN(pitching[statProperty] * pCategory.multiplier) && isFinite(pitching[statProperty] * pCategory.multiplier))
								td.number.category(groups="all " + pCategory.groups)= numeral(pitching[statProperty] * pCategory.multiplier).format(pCategory.numberFormat)
	div.widget
		h2 Points
		table.hoverable#points(style="width:100%")
			thead
				th.sortableHeader(style="text-align:left;width:25%")
					span Team
				-each category in includedCategories
					th.sortableHeader(style="text-align:right")
						-var catName = category.display
						span= catName.toUpperCase()
				th.sortableHeader(style="text-align:right")
					span Total
			tbody
				-each team in teamsWithPoints
					-if(team.teamId != 0)
						-var batting = team.stats.batting;
						-var pitching = team.stats.pitching;
						-var background = user && user.team == team.teamId ? "green" : "";
						tr(style="background:" + background)
							td
								mixin teamLink(teamHash[team.teamId], true)
							-each category in includedCategories
								-if(category.batting)
									td.number(title=team.stats.batting[category.statProperty])= team.standingPoints[category.statProperty]
								-else
									td.number(title=team.stats.pitching[category.statProperty])= team.standingPoints[category.statProperty]
							td.number= team.standingPoints.total
	div(style="visibility:hidden")
		| Begin: 
		input(type="date" name="begin")
		| End:
		input(type="date" name="end")

	| <script type="text/javascript" >
	| console.log(battingCategories);
	| var battingCategories = !{JSON.stringify(battingCategories)};
	| var pitchingCategories = !{JSON.stringify(pitchingCategories)};
	| </script>